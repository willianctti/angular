npm i -g angular/cli //Começar o projeto
instalando o client da angular


cd

ng new curso-angular
criando pasta



ng serve
rodando o local host



ng generate component components/first-componet
criando o primeiro componente




como são feitas INTERPOLAÇÕES!!!!!!!!!!!!!!!!!


no arquivo TS faço as variáveis que posteriormente
virão do banco de dados, exemplo:

export class FirstComponentComponent {
  name: string = 'Willian';
  job = 'Desenvoledor'


no arquivo html escrevo o código html que
receberá as variaveis por meio da interpolações
por exemplo:


<h2>nome: {{ name }} </h2>
<p>Profissão: {{job}}</p>



transferir dado do componente pai para o 
componente filho:



ng generate component components/parent-data



no pai (app.components) crio o pai:


export class AppComponent {
  userName = 'Bruna';




<app-parent-data 
[name]="userName"></app-parent-data>



export class ParentDataComponent {
  @Input() name: string = '';
}



<h1>Descrevendo usuário:</h1>
<p>Nome: {{ name }}</p>




DIRETIVAS!!!!!!!!!!!!!!!!!

RENDERIZAÇÃO CONDICIONAL





EVENTOS!!!!!!!!!!!!!!!!!


this.show = !this.show; // toggle





EVENTEMITTER!!!!!!!!!!!!!!!!!






RENDERIZAÇÃO DE LISTAS!!!!!!!!!!!!!!!!!

receber array como exeplo de um banco de dados
na l[ogica do componente. 

export class ListRenderComponent {
  animals = [
    {name: "Baleia", type: "Mar"},
    {name: "Esquilo", type: "Terra"},
    {name: "Calopsita", type: "ar"}
  ]

}


fazer a interpolação no arquivo html para mostrar
no front.
<h2>Animais:</h2>
    <ul>
        <li *ngFor="let animal of animals">
            nome: {{ animal.name }},
            tipo: {{ animal.type }}
        </li>
    </ul>







INTERFACES NO ANGULAR!!!!!!!!!!!!!!!!!


typeScript

export interface Animal {
    name: string
    type: string
    age: number

} 



export class ListRenderComponent {
  animalDetails = ''
  animals: Animal[] = [
    {name: "Baleia", type: "Mar", age: 4},
    {name: "Esquilo", type: "Terra", age: 10},
    {name: "Calopsita", type: "ar", age: 57}
  ]
  showAge(animal: Animal) {
    this.animalDetails = `O pet ${animal.name} tem ${animal.age} anos!`
  }
}









    <button (click)="showAge(animal)">Show age</button>
        </li>
    </ul>
    <h3>{{ animalDetails }}</h3>







PIPE OPERATORS!!!!!!!!!!!!!!!!!





SERVICES!!!!!!!!!!!!!!!!!



primeiramente criar service com 
g generate service <nome>


no componente, importar o service
import { ListService } 
from 'src/app/services/list.service';


coloca-lo no constrcutor com privete 
com listservice:Listservice


constructor(private listService: ListService) {}


criar um método chamado removeANimal(animal:ANimal)


removeAnimal(animal: Animal) {
    console.log("Animal removido")



service importado






no HTML, criar um botão para excluiir um animal

 <button (click)="removeAnimal(animal
            )">Excluir </button>




no service, criar o que seria a recepçãp de um 
banco de dados

importar {Animal}

 remove(animals: Animal[], animal: Animal) {
    return animals.filter((a) => animal.name !== a.name)
  } 





ANGULAR ROUTER!!!!!!!!!!!!!!!!!


arquivo de rotas

app-routing.module.ts

const routes: Routes = [
  {path: '', component: FirstComponentComponent},
  {path: 'list', component: ListRenderComponent}
];


home = firstComponent

list = ListRenderCOmponent

no html principal:

<nav>
    <a routerLink="/">Home</a>
    <a routerLink="/list">Lista</a>
</nav>
<router-outlet></router-outlet>
<p>footer</p>