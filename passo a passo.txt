Ciclos de vida:

ngOnChanges: chamado uma vez na 
criação do componente e sempre que houver 
alteração em uma de suas propriedades
de entrada. Ou seja, mudanças no Input() 
decorator e no property binding.


ngOnInit: chamado uma única vez 
quando o componente é inicializado 
(logo após o primeiro ngOnChanges).


ngDoCheck: chamado a cada ciclo de 
detecção de alterações (processo que percorre 
o componente atrás de mudanças). Portanto use
 ao invés do ngOnChanges para alterações que o 
Angular não detecta.


ngOnDestroy: chamado antes do Angular destruir 
o componente.
Além disso existem outros 4 ganchos dentro
 do ngDoCheck:

ngAfterContentInit: chamado depois que o conteúdo externo é inserido no componente (por exemplo, vindo do ng-content).

ngAfterContentChecked: invocado após a verificação do conteúdo externo.

ngAfterViewInit: chamado logo após o conteúdo do próprio componente e de seus filhos ser inicializado.

ngAfterViewChecked: chamado cada vez que o conteúdo do componente é verificado pelo mecanismo de detecção de alterações do Angular.






DATA BINDINGS

É uma forrma de exibir dados em seu componente HTML,
trabalhando com dados.

-Interpolation
-Property Binding
-Event Binding
-Two-way Binding






	



DIRETIVAS


ESTRUTURAIS;

*ngIf=""

export class NgIfComponent {
  public condition: boolean = true


  ngOnInit(): void {
    setInterval( () => {
      if(this.condition){
        this.condition = false;
      } else {
        this.condition = true;
      }
    }, 2000 )
  }
}



<p *ngIf="condition; else elseBlock">Teste</p>
<ng-template #elseBlock>
    <p>Sumiu</p>
</ng-template>









ngFOr

itera valores de um array em um HTML



ul>
    <li *ngFor="let item of list">{{  item.nome  }} - idade {{ item.idade }}</li>
</ul>
<button (click)="onClickAddList()">Adicionar</button>

 public list: Array<{ nome: string, idade: number}> = [
    { nome: "Willian Nicoletti", idade: 10 },
    { nome: "Bruna Nicoletti", idade: 18 },
    { nome: "Lucas Gonsalves", idade: 25 }
  ]



public onClickAddList() {
    this.list.push({nome: "Bruno", idade: 19})
  }
}




ngModel


no app.module importar
import { FormsModule } from '@angular/forms';

html
<input [(ngModel)]="nome"> {{nome}}
<button (click)="salvar()">Salvar</button>

<li *ngFor="let item of lista">{{ item.nome }}</li>



ts

começa vazio o array

public lista: Array<{nome: string}> = []


 public salvar() {
    this.lista.push({nome: this.nome});
  }




















Module ANgular
Modules- Ngmodules
SubModules




criar shared module com  ng g m shared
criar component no shared com ng g c shared/NewCOmponent

criar html, css ou o desejado
exportar o newCOmponent para o shared.module com exports: [NewComponentComponent],

importar o shared no app principal no app.component com
SharedModule

 imports: [
    //FormsModule,
    //BrowserModule,
    //AppRoutingModule,
    //HttpClientModule,
    SharedModule

























Input e Output



input()


ng g c shared/input 



exportar o input para usalo no app principal



usar o <app-input> para usar no
html principal <app-input [contador]="addValue"></app-input>
usando o app.component.html


input works!


no input.ts, 

 @Input() public contador: number = 0;
  public addValue: number = 10


registrar com a lupinha o input




 no app.ts

 public addValue: number = 1

sempre que o app inciair o valor estar[a em 1



no input.html

<p>Contador = {{ contador   }}</p>
v



no app.html principal,
<button (click)="add()"> add</button>

e no ts

 public add() {
    this.addValue += 1
  }


assim, quando o botão clicado a função add
retornará o valor + 1






OUTPUT!!!!!!!!!!!!!!!!!!!!!!!!!!!




criei a lista e quando clicar nessa lista 
ele emitirá um dado e esse dado será o nome da miunha lista


public list: Array<{nome: string, idade: number}> = [
    { nome: "WIlian", idade: 29},
    { nome: "Bruna", idade: 87},
    { nome: "Lucas", idade: 19}
  ]




para pegar o evento fora,
 
@Output() public enviarDados = new EventEmitter();
esse output sempre acontecerá quando eu clicar em
enviar dados e emitir o valor

 public getDados(event: number) {
    this.enviarDados.emit(this.list[event]);

  }


sempre que esse evento emitir um dado

<app-output (enviarDados)="setDados($event)"></app-output>

aqui, quem vai capturar o evento é o setDados que 
capturará o evento

então o set dados recevera um evento 

 public setDados(event: {nome: string, idade: number}) {
    this.getDados = event;
  }

e popula o objeto


e a partir disso eu poso mostralo na tela

<ng-template [ngIf]="getDados">
    <h1>{{ getDados.nome}}</h1>
    <h2> {{ getDados.idade}}</h2>
</ng-template>


































		TO DO COM ANGULAR!!!!!!!!!!!!!!!!!!!!
























npm i -g angular/cli //Começar o projeto
instalando o client da angular


cd

ng new curso-angular
criando pasta



ng serve
rodando o local host



ng generate component components/first-componet
criando o primeiro componente




como são feitas INTERPOLAÇÕES!!!!!!!!!!!!!!!!!


no arquivo TS faço as variáveis que posteriormente
virão do banco de dados, exemplo:

export class FirstComponentComponent {
  name: string = 'Willian';
  job = 'Desenvoledor'


no arquivo html escrevo o código html que
receberá as variaveis por meio da interpolações
por exemplo:


<h2>nome: {{ name }} </h2>
<p>Profissão: {{job}}</p>



transferir dado do componente pai para o 
componente filho:



ng generate component components/parent-data



no pai (app.components) crio o pai:


export class AppComponent {
  userName = 'Bruna';




<app-parent-data 
[name]="userName"></app-parent-data>



export class ParentDataComponent {
  @Input() name: string = '';
}



<h1>Descrevendo usuário:</h1>
<p>Nome: {{ name }}</p>




DIRETIVAS!!!!!!!!!!!!!!!!!

RENDERIZAÇÃO CONDICIONAL





EVENTOS!!!!!!!!!!!!!!!!!


this.show = !this.show; // toggle





EVENTEMITTER!!!!!!!!!!!!!!!!!






RENDERIZAÇÃO DE LISTAS!!!!!!!!!!!!!!!!!

receber array como exeplo de um banco de dados
na l[ogica do componente. 

export class ListRenderComponent {
  animals = [
    {name: "Baleia", type: "Mar"},
    {name: "Esquilo", type: "Terra"},
    {name: "Calopsita", type: "ar"}
  ]

}


fazer a interpolação no arquivo html para mostrar
no front.
<h2>Animais:</h2>
    <ul>
        <li *ngFor="let animal of animals">
            nome: {{ animal.name }},
            tipo: {{ animal.type }}
        </li>
    </ul>







INTERFACES NO ANGULAR!!!!!!!!!!!!!!!!!


typeScript

export interface Animal {
    name: string
    type: string
    age: number

} 



export class ListRenderComponent {
  animalDetails = ''
  animals: Animal[] = [
    {name: "Baleia", type: "Mar", age: 4},
    {name: "Esquilo", type: "Terra", age: 10},
    {name: "Calopsita", type: "ar", age: 57}
  ]
  showAge(animal: Animal) {
    this.animalDetails = `O pet ${animal.name} tem ${animal.age} anos!`
  }
}









    <button (click)="showAge(animal)">Show age</button>
        </li>
    </ul>
    <h3>{{ animalDetails }}</h3>







PIPE OPERATORS!!!!!!!!!!!!!!!!!





SERVICES!!!!!!!!!!!!!!!!!



primeiramente criar service com 
g generate service <nome>


no componente, importar o service
import { ListService } 
from 'src/app/services/list.service';


coloca-lo no constrcutor com privete 
com listservice:Listservice


constructor(private listService: ListService) {}


criar um método chamado removeANimal(animal:ANimal)


removeAnimal(animal: Animal) {
    console.log("Animal removido")



service importado






no HTML, criar um botão para excluiir um animal

 <button (click)="removeAnimal(animal
            )">Excluir </button>




no service, criar o que seria a recepçãp de um 
banco de dados

importar {Animal}

 remove(animals: Animal[], animal: Animal) {
    return animals.filter((a) => animal.name !== a.name)
  } 





ANGULAR ROUTER!!!!!!!!!!!!!!!!!


arquivo de rotas

app-routing.module.ts

const routes: Routes = [
  {path: '', component: FirstComponentComponent},
  {path: 'list', component: ListRenderComponent}
];


home = firstComponent

list = ListRenderCOmponent

no html principal:

<nav>
    <a routerLink="/">Home</a>
    <a routerLink="/list">Lista</a>
</nav>
<router-outlet></router-outlet>
<p>footer</p>






REQUISIÇÕES HTTP!!!!!!!!!!!!!!!!!



primeiramente, na pasta geral inbstalar o npm i json-server
na pasta raiz criar o db.json para simular um banco
{
  "animals": [
      {"id": 1, "name": "Turca", "type": "Dog",   "age": 4 },
      {"id": 2, "name": "Tom",   "type": "Cat",   "age": 10 },
      {"id": 3, "name": "Frida", "type": "Dog",   "age": 11 },
      {"id": 4, "name": "Bob",   "type": "Horse", "age": 2 },
      {"id": 5, "name": "Paco",  "type": "Bird",  "age": 1 }
  ]
}

criar um script no package.json para rodar o arquivo
da api db-json

rodar no terminal a api npm run server


importar no app.module httpCLienteModule

import { HttpClientModule}
 from '@angular/common/http'


importar no imports

abrir o list-render para trabalhare com algo 
semehlhante ao mundo real


requisição do componente passar pelo service


fazer a requisição http com o getAll() no list
service

primeiro, importar os componentes do angular

import { HttpClient, HttpHeaders} 
from "@angular/common/http"



declarar a url da api no listService 

export class ListService {
  private apiUrl = 'http://localhost:3000/animals'



import { Observable, observable } from 'rxjs';

o observable vai fazer  com que a requisição
ocorra da melhor maneira possivel

no getall(): Observable<Animal[]> {
	

como não temos acesso direto da importação,
passar pelo constructor constructor(private http: HttpClient) { }


no getall(): Observable<Animal[]> {
	return this.http.get(this.apiUrl)


no list render components, dar subscribe para 
concretizar o evento.

getAnimals(): void {
    this.listService.getAll().subscribe
((animals) => (this.animals = animals));
  }
}

Requisição http fializada pelo método GET








Dynamic Routes - dado individual 


resgatar um dado do banco
baseado pelo id
para resgatar os parametros da url usar o 
ActivatedRoute, módulo do angular










 



